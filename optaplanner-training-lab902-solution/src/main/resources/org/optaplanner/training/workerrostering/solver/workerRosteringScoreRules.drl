/*
 * Copyright 2016 Red Hat, Inc. and/or its affiliates.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.optaplanner.examples.workerrostering.solver;
    dialect "java"

import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScoreHolder;

import org.optaplanner.training.workerrostering.domain.Employee;
import org.optaplanner.training.workerrostering.domain.Roster;
import org.optaplanner.training.workerrostering.domain.RosterParametrization;
import org.optaplanner.training.workerrostering.domain.ShiftAssignment;
import org.optaplanner.training.workerrostering.domain.Skill;
import org.optaplanner.training.workerrostering.domain.Spot;
import org.optaplanner.training.workerrostering.domain.TimeSlot;

global HardSoftScoreHolder scoreHolder;

// ############################################################################
// Hard constraints
// ############################################################################

rule "required skill"
    when
        ShiftAssignment(
                employee != null,
                !getEmployee().getSkillSet().contains(getSpot().getRequiredSkill()))
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

rule "Unavailable timeslots"
    when
        ShiftAssignment(
                employee != null,
                getEmployee().getUnavailableTimeSlotSet().contains(getTimeSlot()))
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

rule "One shift assignment per day"
    when
        $s : ShiftAssignment(
                employee != null,
                $e : employee,
                $d : getTimeSlot().getStartDateTime().toLocalDate())
        ShiftAssignment(
                employee == $e,
                timeSlot.startDateTime.toLocalDate() == $d,
                this != $s)
    then
        scoreHolder.addHardConstraintMatch(kcontext, -1);
end

// ############################################################################
// Soft constraints
// ############################################################################

rule "Fair load balancing"
    when
        $e : Employee()
        accumulate(
            $a : ShiftAssignment(employee == $e);
            $total : count($a)
        )
    then
        // Fairness and load balancing trick (see docs): squared to assure correctness in corner cases
        scoreHolder.addSoftConstraintMatch(kcontext, - ($total.intValue() * $total.intValue()));
end
